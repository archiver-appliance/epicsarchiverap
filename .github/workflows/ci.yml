# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Test and Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read
  checks: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  unittests:
    name: Build and run unit tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: test
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'
      - name: Upload build reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unitests-build-reports
          path: build/reports/
      - name: Upload package
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-package
          path: build/distributions/*.tar.gz

  epicstests:
    name: Run all unit tests reliant on EPICS install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Create Build Reports Folder
        run: mkdir -p build/reports/tests
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Run tests with docker compose
        run: docker compose -f docker/docker-compose.epicsTests.yml run epicsarchiver-test
        env:
          DOCKER_DEFAULT_PLATFORM: linux/amd64
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/epicsTests/TEST-*.xml'
      - name: Upload build reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: epicstests-build-reports
          path: build/reports/

  build-custom-version:
    needs: [unittests, epicstests]
    name: Build Slacdev and Default site version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        siteid: ["slacdev", "default"]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: assemble
        env:
          ARCHAPPL_SITEID: ${{ matrix.siteid }}
      - name: Upload package
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.siteid }}-package
          path: build/distributions/*.tar.gz

  build-and-push-image:
    needs: [unittests, epicstests]
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: assemble
        env:
          ARCHAPPL_SITEID: "default"
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
