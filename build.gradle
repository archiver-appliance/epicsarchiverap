plugins {
	id "java-library"
	id "war"
	id "eclipse"
	id "ca.cutterslade.analyze" version "1.9.2" // Analyzes dependancies for usage
	id 'com.palantir.git-version' version '3.0.0'
	id("com.diffplug.spotless") version "6.25.0"
}

sourceSets {
	main {
		java {
			srcDir "src/main/"
		}
		resources {
			srcDirs = []
		}
	}
	test {
		java {
			srcDir "src/test/"
		}
		resources {
			srcDirs = []
		}
	}
}

processTestResources {
	from(file("src/sitespecific/tests/classpathfiles"))
	from(file("src/resources/test")) {
		include "log4j2.xml"
		include "appliances.xml.j2"
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

ext {
    runTestsSequentially = findProperty('ARCHAPPL_SEQUENTIAL_TESTS') ?: false
}

// Allows: gradle -PprojVersion=X build
version project.findProperty('projVersion') ?: gitVersion() ?: "UnknownVersion"

def stageDir = layout.projectDirectory.file("build/stage")
def srcDir = layout.projectDirectory.file("src/main")
def libDir = layout.projectDirectory.file("lib")
def apiDocsDir = layout.projectDirectory.file("docs/api")
def archapplsite = System.getenv("ARCHAPPL_SITEID") ?: "tests"
def defaultsitespecificpath = "src/sitespecific/${archapplsite}"
// Allow the site to be outside of the repository
def sitespecificpath = (new File("${defaultsitespecificpath}").exists()) ? defaultsitespecificpath : archapplsite

ant.stage = stageDir
ant.archapplsite = archapplsite
ant.sitespecificpath = sitespecificpath
ant.importBuild("build.xml")

repositories {
	flatDir {
		name = "libs dir"
		dir file("lib")
	}
	flatDir {
		name = "test libs dir"
		dir file("lib/test")
	}
	mavenCentral()
	maven { url "https://clojars.org/repo" }
	ivy {
		url 'https://github.com/'

		patternLayout {
			artifact '/[organisation]/[module]/archive/[revision].[ext]'
		}

		// This is required in Gradle 6.0+ as metadata file (ivy.xml)
		// is mandatory. Docs linked below this code section
		metadataSources { artifact() }
	}
}

configurations {
	viewer
}

dependencies {
	// Local depencencies
	implementation files("lib/jamtio_071005.jar",
			"lib/redisnio_0.0.1.jar")
	testImplementation("com.hubspot.jinjava:jinjava:2.7.0")
	testImplementation files("lib/test/BPLTaglets.jar")
	testImplementation(":pbrawclient:0.2.1")
	// github
	viewer("archiver-appliance:svg_viewer:v1.1.0@zip") // Not compileOnly to avoid check by analyze
	// Maven dependencies
	testImplementation("org.seleniumhq.selenium:selenium-java:4.22.0")
	testImplementation("org.seleniumhq.selenium:selenium-firefox-driver:4.22.0")
	testImplementation("org.seleniumhq.selenium:selenium-support:4.22.0")
	testImplementation("io.github.bonigarcia:webdrivermanager:5.9.1")
	testImplementation("org.apache.commons:commons-compress:1.23.0")
	testImplementation("org.junit.jupiter:junit-jupiter-params:5.9.3")
	implementation("org.apache.tomcat:tomcat-servlet-api:9.0.74")// Only needed for tests, but inbuilt to main)
	implementation("org.epics:jca:2.4.7")
	implementation('commons-codec:commons-codec:1.15')
	implementation('commons-fileupload:commons-fileupload:1.5')
	implementation('commons-io:commons-io:2.11.0')
	implementation("org.apache.commons:commons-lang3:3.12.0")
	implementation("org.apache.commons:commons-math3:3.6.1")
	implementation("commons-validator:commons-validator:1.7")
	implementation("com.google.guava:guava:31.1-jre")
	implementation("com.hazelcast:hazelcast:5.4.0")
	implementation("org.apache.httpcomponents:httpclient:4.5.14")
	implementation("org.apache.httpcomponents:httpcore:4.4.16")
	implementation("jdbm:jdbm:2.4") //clojar dependancy
	implementation("redis.clients:jedis:4.4.0")
	implementation("com.googlecode.json-simple:json-simple:1.1.1")
	implementation("org.python:jython-standalone:2.7.3")
	runtimeOnly("org.apache.logging.log4j:log4j-1.2-api:2.20.0") // TODO remove log4j 1 from dependencies
	implementation("org.apache.logging.log4j:log4j-api:2.20.0")
	implementation("org.apache.logging.log4j:log4j-slf4j2-impl:2.20.0")
	permitUnusedDeclared("org.apache.logging.log4j:log4j-slf4j2-impl:2.20.0")
	implementation("org.apache.logging.log4j:log4j-jul:2.20.0")
	permitUnusedDeclared("org.apache.logging.log4j:log4j-jul:2.20.0")
	runtimeOnly("org.apache.logging.log4j:log4j-core:2.20.0")
	runtimeOnly("org.apache.logging.log4j:log4j-slf4j2-impl:2.20.0")
	runtimeOnly("org.mariadb.jdbc:mariadb-java-client:3.3.3")
	implementation("com.opencsv:opencsv:5.7.1")
	implementation("com.google.protobuf:protobuf-java:3.23.0")
	testImplementation("commons-cli:commons-cli:1.5.0")
	testImplementation("org.junit.jupiter:junit-jupiter-api:5.2.0")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.2.0")
	testImplementation('org.awaitility:awaitility:4.2.0')
	implementation("org.phoebus:core-pva:4.7.2")
    runtimeOnly("org.mariadb.jdbc:mariadb-java-client:3.1.4")
}

tasks.register("cleanApiDocs", Delete) {
	group = "Clean"
	description = "Remove the generated java api docs."
	delete file(apiDocsDir)
}

clean.dependsOn("cleanApiDocs")

tasks.register("generateBPLActionsMappings", JavaExec) {
	group = "Documentation"
	description = "Generates the rest api documentation."
	it.outputs.file("${apiDocsDir}/mgmtpathmappings.txt")
	doFirst {
		mkdir apiDocsDir
		standardOutput = new FileOutputStream("${apiDocsDir}/mgmtpathmappings.txt")
	}
	mainClass = "org.epics.archiverappliance.mgmt.BPLServlet"

	classpath = sourceSets.main.runtimeClasspath
}

tasks.register("generateJavaDocTagletScriptables", JavaExec) {
	group = "Documentation"
	dependsOn "generateBPLActionsMappings"
	mainClass = "org.epics.archiverappliance.common.taglets.ProcessMgmtScriptables"
	it.inputs.file("${apiDocsDir}/mgmt_scriptables.txt")
	it.outputs.file("${apiDocsDir}/mgmt_scriptables.html")
	classpath = sourceSets.main.runtimeClasspath
	workingDir = project.projectDir
}

javadoc {
	dependsOn "generateBPLActionsMappings"
	mustRunAfter "generateBPLActionsMappings"
	finalizedBy "generateJavaDocTagletScriptables"
	doFirst {
		copy {
			from layout.projectDirectory.file("LICENSE"),
					file("${srcDir}/edu/stanford/slac/archiverappliance/PB/EPICSEvent.proto")
			into layout.projectDirectory.dir("docs")
		}
	}
	it.outputs.file("${apiDocsDir}/mgmt_scriptables.txt")
	source = sourceSets.main.allJava
	failOnError = false
	options {
		author true
		version true
		setUse(true)
		links "https://docs.oracle.com/en/java/javase/12/docs/api/"
		taglets "org.epics.archiverappliance.taglets.BPLActionTaglet",
				"org.epics.archiverappliance.taglets.BPLActionParamTaglet",
				"org.epics.archiverappliance.taglets.BPLActionEndTaglet"
		tagletPath file("lib/test/BPLTaglets.jar")
	}
}


tasks.register("syncStaticContentHeaderFooters", JavaExec) {
	group = "Staging"
	dependsOn "compileJava"
	mainClass = "org.epics.archiverappliance.mgmt.bpl.SyncStaticContentHeadersFooters"
	args "${srcDir}/org/epics/archiverappliance/mgmt/staticcontent/index.html",
			"${srcDir}/org/epics/archiverappliance/mgmt/staticcontent/"

	classpath = sourceSets.main.runtimeClasspath
}

tasks.register("stageSvgViewer", Zip) {
	group = "Staging"
	description = "Copy svg viewer project for assembling"
	def archPath =  project.configurations.viewer.singleFile
	from(zipTree(archPath)) {
		include "svg_viewer-*/**"
		eachFile { fcd ->
			fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
		}
	}
	archiveFileName = "viewer.zip"
	includeEmptyDirs = false
	destinationDirectory = layout.projectDirectory.dir("${stageDir}/org/epics/archiverappliance/retrieval/staticcontent")
}

tasks.register("sitespecificantscript") {
	dependsOn("stage")
	ant.classes = sourceSets.main.runtimeClasspath.asPath
	finalizedBy "sitespecificbuild"
}

tasks.register("stage") {
	group = "Staging"
	description = "Copy static content from each of the projects into the staging directory."
	dependsOn javadoc
	finalizedBy "stageSvgViewer"
	mkdir stageDir

	copy {
		from "${docsDir}/*.*"
		into apiDocsDir
	}
	copy {
		from file("${srcDir}/org/epics/archiverappliance/staticcontent")
		into file("${stageDir}/org/epics/archiverappliance/staticcontent")
	}
	copy {
		from file("${srcDir}/org/epics/archiverappliance/retrieval/staticcontent")
		into file("${stageDir}/org/epics/archiverappliance/retrieval/staticcontent")
	}
	copy {
		from file("${srcDir}/org/epics/archiverappliance/mgmt/staticcontent")
		into file("${stageDir}/org/epics/archiverappliance/mgmt/staticcontent")
	}
	new File("${stageDir}/org/epics/archiverappliance/staticcontent", "version.txt").text = "Archiver Appliance Version ${version}"
}

tasks.register("generateReleaseNotes", Exec) {
	group = "Staging"
	description = "Generate the Release Notes."
	it.outputs.file("${stageDir}/RELEASE_NOTES")
	doFirst {
		standardOutput new FileOutputStream("${stageDir}/RELEASE_NOTES")
	}
	commandLine "git", "log", "--oneline", "remotes/origin/master"
}

tasks.register("sphinx", Exec) {
	group = "Staging"
	description = "Generate the documentation site."
	dependsOn "javadoc"
	workingDir "docs"
	it.outputs.dir("docs/docs/build")
	commandLine "./build_docs.sh"
}

/**
 * Common parts to all the war building.
 */
tasks.withType(War).configureEach {
	dependsOn "stage", "sitespecificantscript"
	from("${stageDir}/org/epics/archiverappliance/staticcontent") {
		into "ui/comm"
	}
	if (archapplsite == "tests") {
		from("src/resources/test/log4j2.xml") {
			into "WEB-INF/classes"
		}
	}
	from("${sitespecificpath}/classpathfiles") {
		into "WEB-INF/classes"
	}
	rootSpec.exclude("**/tomcat-servlet-api*.jar")
}

tasks.register("mgmtWar", War) {
	group = "Wars"
	dependsOn "sphinx"
	from("${stageDir}/org/epics/archiverappliance/mgmt/staticcontent") {
		into "ui"
	}
	from("${srcDir}/org/epics/archiverappliance/config/persistence") {
		include "*.sql"
		into "install"
	}
	from("docs/docs/build") {
		into "ui/help"
	}
	from("docs/docs/source/samples") {
		include "deployMultipleTomcats.py"
		into "install"
	}
	from("${srcDir}/org/epics/archiverappliance/common/scripts") {
		fileMode 755
		into "install/pbutils"
	}

	archiveFileName = "mgmt.war"
	webXml = file("${srcDir}/org/epics/archiverappliance/mgmt/WEB-INF/web.xml")
}

tasks.register("etlWar", War) {
	group = "Wars"

	archiveFileName = "etl.war"
	webXml = file("${srcDir}/org/epics/archiverappliance/etl/WEB-INF/web.xml")
}

tasks.register("engineWar", War) {
	group = "Wars"
	from("lib/native/linux-x86") {
		fileMode 755
		include "caRepeater"
		into "WEB-INF/lib/native/linux-x86"
	}
	from("lib/native/linux-x86_64") {
		fileMode 755
		include "caRepeater"
		into "WEB-INF/lib/native/linux-x86_64"
	}
	from("lib/native") {
		fileMode 755
		include "**/*.so"
		into "WEB-INF/lib/native/linux-x86"
	}

	archiveFileName = "engine.war"
	webXml = file("${srcDir}/org/epics/archiverappliance/engine/WEB-INF/web.xml")
}

tasks.register("retreivalWar", War) {
	group = "Wars"
	dependsOn "stageSvgViewer"
	from("${stageDir}/org/epics/archiverappliance/retrieval/staticcontent") {
		into "ui"
	}

	archiveFileName = "retrieval.war"
	webXml = file("${srcDir}/org/epics/archiverappliance/retrieval/WEB-INF/web.xml")
}

tasks.register("buildRelease", Tar) {
	group = "Wars"
	description = "Builds a full release and zips up in a tar file."
	dependsOn "mgmtWar"
	dependsOn "retreivalWar"
	dependsOn "etlWar"
	dependsOn "engineWar"
	dependsOn "generateReleaseNotes"

	archiveFileName = "archappl_v${version}.tar.gz"
	compression = Compression.GZIP
	from layout.buildDirectory.file("libs/mgmt.war")
	from layout.buildDirectory.file("libs/engine.war")
	from layout.buildDirectory.file("libs/etl.war")
	from layout.buildDirectory.file("libs/retrieval.war")
	from(".") {
		include "LICENSE"
		include "NOTICE"
		include "*License.txt"
		include "RELEASE_NOTES"
	}
	def samplesFolder = "docs/docs/source/samples"
	from("${samplesFolder}") {
		fileMode 755
		include "quickstart.sh"
	}
	from("${samplesFolder}") {
		include "sampleStartup.sh"
		include "deployMultipleTomcats.py"
		include "addMysqlConnPool.py"
		include "single_machine_install.sh"
		into "install_scripts"
	}
	from("${samplesFolder}/site_specific_content") {
		into "sample_site_specific_content"
		include "template_changes.html"
	}
	from("${samplesFolder}/site_specific_content") {
		into "sample_site_specific_content/img"
		include "*.png"
	}
	from("${srcDir}/org/epics/archiverappliance/config/persistence") {
		into "install_scripts"
		include "*.sql"
	}
}

war {
	dependsOn "buildRelease"
}

assemble {
	dependsOn "buildRelease"
}

tasks.withType(Test).configureEach {
	maxParallelForks = runTestsSequentially.toBoolean() ? 1 : ( Runtime.runtime.availableProcessors().intdiv(2) ?: 1 )

	doFirst {
		mkdir file("${temporaryDir}/sts")
		mkdir file("${temporaryDir}/mts")
		mkdir file("${temporaryDir}/lts")
		logger.info("Running the tests using {} maxParallelForks", maxParallelForks)
	}
	
	filter {
		//include specific method in any of the tests
		includeTestsMatching "*Test"
	}
	maxHeapSize = "1G"
	jvmArgs = [
			"-Dwebdriver.gecko.driver=${libDir}/test/geckodriver-v0.24.0-linux64/geckodriver",
			"-Dlog4j1.compatibility=\"true\""
	]

	environment "ARCHAPPL_SHORT_TERM_FOLDER", "${temporaryDir}/sts"
	environment "ARCHAPPL_MEDIUM_TERM_FOLDER", "${temporaryDir}/mts"
	environment "ARCHAPPL_LONG_TERM_FOLDER", "${temporaryDir}/lts"

	doLast {
		delete file("${temporaryDir}/sts")
		delete file("${temporaryDir}/mts")
		delete file("${temporaryDir}/lts")
	}
}

tasks.register("unitTests", Test) {
	group = "Test"
	description = "Run all unit tests."
	useJUnitPlatform {
		excludeTags "flaky",
				"integration",
				"localEpics"
	}
}

tasks.register("flakyTests", Test) {
	group = "Test"
	description = "Run unit tests that due to timimg or machine specifics, could fail."
	useJUnitPlatform {
		includeTags "flaky"
		excludeTags "slow",
				"integration",
				"localEpics"
	}
}

tasks.register("shutdownAllTomcats", Exec) {
	group = "test"
	description "task to shut down all tomcats after running integration tests," +
			" if they didn't shut down correctly."
	ignoreExitValue true
	commandLine "echo", "This is where we kill any lingering tomcats using a special tag"
	commandLine "pkill", "-9", "-f", "Deaatag=eaatesttm"
}

tasks.register("integrationTestSetup", Copy) {
	group = "Test"
	description = "Setup for Integration Tests."
	dependsOn("buildRelease")
	it.inputs.dir("$System.env.TOMCAT_HOME/conf")
	it.outputs.dir("$System.env.TOMCAT_HOME/conf_original")
	// backup the original tomcat conf folder
	// if not already done. See org.epics.archiverappliance.TomcatSetup
	def catalinaConf = file("$System.env.TOMCAT_HOME/conf_original")
	if (!catalinaConf.exists()) {
		copy {
			from "$System.env.TOMCAT_HOME/conf"
			into "$System.env.TOMCAT_HOME/conf_original"
		}
	}
}

tasks.register("integrationTests", Test) {
	group = "Test"
	description = "Run the integration tests, ones that require a tomcat installation."
	forkEvery 1
	maxParallelForks = 1
	dependsOn("integrationTestSetup")
	useJUnitPlatform {
		includeTags "integration"
		excludeTags "slow",
				"flaky"
	}
	finalizedBy "shutdownAllTomcats"
}

tasks.register("epicsTests", Test) {
	group = "Test"
	description = "Run the epics integration tests with parallel iocs."
	useJUnitPlatform {
		includeTags "localEpics"
		excludeTags "slow",
				"flaky",
				"integration"
	}
}

tasks.register("singleForkTests", Test) {
	group = "Test"
	description = "Run the single fork tests. Ones that require a fork every test."
	forkEvery 1
	useJUnitPlatform {
		includeTags "singleFork"
		excludeTags "slow",
				"flaky",
				"integration",
				"localEpics"
	}
}

test {
	group = "Test"
	useJUnitPlatform {
		excludeTags "integration",
				"localEpics",
				"flaky",
				"singleFork",
				"slow"
	}
}

tasks.register("allTests", Test) {
	group = "Test"
	description = "Run all the tests."
	dependsOn "unitTests"
	dependsOn "singleForkTests"
	dependsOn "integrationTests"
	dependsOn "flakyTests"
}

tasks.register("testRun", JavaExec) {
	group = "test"
	description = "Runs the application same as for integration tests."
	dependsOn "integrationTestSetup"

	environment "ARCHAPPL_SHORT_TERM_FOLDER", "${buildDir}/storage/sts"
	environment "ARCHAPPL_MEDIUM_TERM_FOLDER", "${buildDir}/storage/mts"
	environment "ARCHAPPL_LONG_TERM_FOLDER", "${buildDir}/storage/lts"

	mainClass = "org.epics.archiverappliance.TestRun"

	classpath = sourceSets.test.runtimeClasspath
	args "-c2"

}

spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
	ratchetFrom 'origin/master'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	format 'styling', {
		target 'docs/docs/source/**/*.html', 'docs/docs/source/**/*.css', 'docs/docs/source/**/*.md', 'docs/**/docs.js', 'src/main/**/*.html', 'src/main/**/*.js', 'src/main/**/*.css'
		prettier()
	}
	java {
		// Exclude the generated java from the protobuf
		targetExclude(fileTree("$srcDir") { include("**/EPICSEvent.java") })
		// don't need to set target, it is inferred from java
		removeUnusedImports()
		cleanthat()
		// apply a specific flavor of google-java-format
		palantirJavaFormat()
		importOrder('', 'java|javax', '\\#')
		// fix formatting of type annotations
		formatAnnotations()
	}
}

defaultTasks "buildRelease"
